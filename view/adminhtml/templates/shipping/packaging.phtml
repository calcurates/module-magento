<?php
/**
 * @author Calcurates Team
 * @copyright Copyright Â© 2019-2020 Calcurates (https://www.calcurates.com)
 * @license https://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @package Calcurates_ModuleMagento
 */
?>
<?php /** @var $block \Calcurates\ModuleMagento\Block\Adminhtml\Shipping\Packaging */?>

<?php if ($block->shippingMethodIsCalcurates()): ?>
    <script>
        require([
            "jquery",
            "prototype",
            "Magento_Shipping/order/packaging"
        ], function(jQuery){
            var checkboxLabel = jQuery('label[for=create_shipping_label] span'),
                text = "<?= $block->escapeHtml(__('Create Shipping Label with Calcurates')) ?>",
                customPackagesData = <?= /* @noEscape */ $block->getCustomPackagesJson() ?>;

            if (checkboxLabel.length > 0) {
                checkboxLabel.text(text);
            }

            if (customPackagesData.length > 0) {
                window.Packaging = Class.create(Packaging, {
                    changeContainerType: function($super, elem) {
                        $super(elem);
                        var packageId = jQuery(elem).val(),
                            packageBlock = jQuery(elem).closest('[id^="package_block"]'),
                            templateReplacement = false;

                        if (packageBlock.length === 0) {
                            packageBlock = jQuery(elem).closest('#package_template');
                            templateReplacement = true
                        }

                        this.updatePackageFields(packageId, packageBlock, templateReplacement);
                        if (!templateReplacement) {
                            this.recalcContainerWeightAndCustomsValue(elem);
                        }
                    },

                    changeMeasures: function ($super, obj) {
                        // do nothing
                    },

                    checkAllItems: function ($super, headCheckbox) {
                        $super(headCheckbox);

                        $(headCheckbox).up('table').select('tbody input[type="checkbox"]').each(function (checkbox) {
                            checkbox.checked = headCheckbox.checked;
                            this._observeHsCode.call(checkbox);
                        }.bind(this));
                    },

                    processPackagePrepare: function ($super, packagePrepare) {
                        $super(packagePrepare);

                        packagePrepare.select('tbody input[type="checkbox"]').each(function (item) {
                            $(item).observe('change', this._observeHsCode);
                            this._observeHsCode.call(item);
                        }.bind(this));
                    },

                    _observeHsCode: function () {
                        /** this = input[type="checkbox"] */
                        var tr  = jQuery(this).closest('tr')[0],
                            hs_code = $(tr.cells[tr.cells.length - 3]).select('[name="hs_code_value"]')[0];

                        if ('undefined' != typeof hs_code) {
                            if (hs_code.disabled = !this.checked) {
                                $(hs_code).addClassName('_disabled');
                            } else {
                                $(hs_code).removeClassName('_disabled');
                            }
                        }
                    },

                    _recalcContainerWeightAndCustomsValue: function ($super, container) {
                        $super(container);
                        var packageBlock = jQuery(container).closest('[id^="package_block"]'),
                            packageId = packageBlock.find('select[name=package_container]').val(),
                            packageData = this.getPackageData(packageId);

                        if (packageData) {
                            this.appendPackageTareWeight(packageBlock, packageData.weightTare, false);
                        }
                    },

                    getPackageData: function (packageId) {
                        var result;
                        customPackagesData.forEach(function (packageData) {
                            if (packageData.id == packageId) {
                                result = packageData
                            }
                        });

                        return result;
                    },

                    updatePackageFields: function (packageId, packageBlock, templateReplacement) {
                        var lengthField = packageBlock.find('input[name="container_length"]'),
                            widthField = packageBlock.find('input[name="container_width"]'),
                            heightField = packageBlock.find('input[name="container_height"]'),
                            dimensionUnitsField = packageBlock.find('select[name="container_dimension_units"]'),
                            weightUnitsField = packageBlock.find('select[name="container_weight_units"]'),
                            packageData = this.getPackageData(packageId);

                        if (packageData) {
                            packageData.dimensionsOuterLength ?
                                lengthField.val(packageData.dimensionsOuterLength) :
                                lengthField.removeClass('validate-greater-than-zero').attr('disabled', true);
                            packageData.dimensionsOuterWidth ?
                                widthField.val(packageData.dimensionsOuterWidth) :
                                widthField.removeClass('validate-greater-than-zero').attr('disabled', true);
                            packageData.dimensionsOuterHeight ?
                                heightField.val(packageData.dimensionsOuterHeight) :
                                heightField.removeClass('validate-greater-than-zero').attr('disabled', true);

                            if (templateReplacement) {
                                this.replaceSelectedOption(dimensionUnitsField, packageData.dimensionsUnit);
                                this.replaceSelectedOption(weightUnitsField, packageData.weightUnit);
                            } else {
                                dimensionUnitsField.val(packageData.dimensionsUnit);
                                weightUnitsField.val(packageData.weightUnit);
                            }
                            this.appendPackageTareWeight(packageBlock, packageData.weightTare, true);
                        }
                    },

                    replaceSelectedOption: function (select, value) {
                        select.find('option').each(function () {
                            var elem = jQuery(this);
                            if (elem.attr('value') === value) {
                                elem.attr('selected', true)
                            } else if (elem.attr('value') === '' && value === null) {
                                elem.attr('selected', true)
                                elem.removeAttr('hidden')
                            } else {
                                elem.removeAttr('selected');
                            }
                        })
                        select.attr('disabled', value === null)
                    },

                    appendPackageTareWeight: function (packageBlock, weightTare, resetCurrentValue) {
                        var containerWeight = packageBlock.find('input[name="container_weight"]')[0],
                            currentValue = resetCurrentValue ? 0 : parseFloat(containerWeight.value);

                        if (weightTare <= 0) {
                            return;
                        }

                        if (isNaN(currentValue)) {
                            currentValue = 0;
                        }

                        containerWeight.value = currentValue + weightTare;
                        containerWeight.value = parseFloat(parseFloat(Math.round(containerWeight.value + 'e+4') + 'e-4').toFixed(4));
                    },

                    packItems: function ($super, obj) {
                        $super(obj);

                        var packageBlock = $(obj).up('[id^="package_block"]');
                        var packageId = this.getPackageId(packageBlock);
                        var packItems = packageBlock.select('.package_items')[0];
                        if (packItems) {
                            packItems.select('.grid tbody tr').each(function (item) {
                                var itemId = item.select('[type="checkbox"]')[0].value;
                                var hsCode  = item.select('[name="hs_code_value"]')[0];
                                if ('undefined' != typeof hsCode) {
                                    if ('undefined' != typeof this.packages[packageId]['items'][itemId]) {
                                        this.packages[packageId]['items'][itemId]['hs_code_value'] = hsCode.value;
                                    }
                                    hsCode.disabled = 'disabled';
                                }
                            }.bind(this));
                        }
                    },

                    sendCreateLabelRequest: function () {
                        var self = this;

                        if (!this.validate()) {
                            this.messages.show().update(this.validationErrorMsg);
                            return;
                        }
                        this.messages.hide().update();

                        if (this.createLabelUrl) {
                            var weight, length, width, height = null;
                            var packagesParams = [];

                            this.packagesContent.childElements().each(function (pack) {
                                var packageId = this.getPackageId(pack);

                                weight = parseFloat(pack.select('input[name="container_weight"]')[0].value);
                                length = parseFloat(pack.select('input[name="container_length"]')[0].value);
                                width = parseFloat(pack.select('input[name="container_width"]')[0].value);
                                height = parseFloat(pack.select('input[name="container_height"]')[0].value);
                                packagesParams[packageId] = {
                                    container:                  pack.select('select[name="package_container"]')[0].value,
                                    customs_value:              parseFloat(pack.select('input[name="package_customs_value"]')[0].value, 10),
                                    weight:                     isNaN(weight) ? '' : weight,
                                    length:                     isNaN(length) ? '' : length,
                                    width:                      isNaN(width) ? '' : width,
                                    height:                     isNaN(height) ? '' : height,
                                    weight_units:               pack.select('select[name="container_weight_units"]')[0].value,
                                    dimension_units:            pack.select('select[name="container_dimension_units"]')[0].value
                                };

                                if (isNaN(packagesParams[packageId]['customs_value'])) {
                                    packagesParams[packageId]['customs_value'] = 0;
                                }

                                if ('undefined' != typeof pack.select('select[name="package_size"]')[0]) {
                                    if ('' != pack.select('select[name="package_size"]')[0].value) {
                                        packagesParams[packageId]['size'] = pack.select('select[name="package_size"]')[0].value;
                                    }
                                }

                                if ('undefined' != typeof pack.select('input[name="container_girth"]')[0]) {
                                    if ('' != pack.select('input[name="container_girth"]')[0].value) {
                                        packagesParams[packageId]['girth'] = pack.select('input[name="container_girth"]')[0].value;
                                        packagesParams[packageId]['girth_dimension_units'] = pack.select('select[name="container_girth_dimension_units"]')[0].value;
                                    }
                                }

                                if ('undefined' != typeof pack.select('select[name="content_type"]')[0] && 'undefined' != typeof pack.select('input[name="content_type_other"]')[0]) {
                                    packagesParams[packageId]['content_type'] = pack.select('select[name="content_type"]')[0].value;
                                    packagesParams[packageId]['content_type_other'] = pack.select('input[name="content_type_other"]')[0].value;
                                } else {
                                    packagesParams[packageId]['content_type'] = '';
                                    packagesParams[packageId]['content_type_other'] = '';
                                }
                                var deliveryConfirmation = pack.select('select[name="delivery_confirmation_types"]');

                                if (deliveryConfirmation.length) {
                                    packagesParams[packageId]['delivery_confirmation'] =  deliveryConfirmation[0].value;
                                }
                            }.bind(this));

                            for (var packageId in this.packages) {
                                if (!isNaN(packageId)) {
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[container]']              = packagesParams[packageId]['container'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[weight]']                 = packagesParams[packageId]['weight'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[customs_value]']          = packagesParams[packageId]['customs_value'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[length]']                 = packagesParams[packageId]['length'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[width]']                  = packagesParams[packageId]['width'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[height]']                 = packagesParams[packageId]['height'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[weight_units]']           = packagesParams[packageId]['weight_units'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[dimension_units]']        = packagesParams[packageId]['dimension_units'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[content_type]']           = packagesParams[packageId]['content_type'];
                                    this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[content_type_other]']     = packagesParams[packageId]['content_type_other'];

                                    if ('undefined' != typeof packagesParams[packageId]['size']) {
                                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[size]'] = packagesParams[packageId]['size'];
                                    }

                                    if ('undefined' != typeof packagesParams[packageId]['girth']) {
                                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[girth]'] = packagesParams[packageId]['girth'];
                                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[girth_dimension_units]'] = packagesParams[packageId]['girth_dimension_units'];
                                    }

                                    if ('undefined' != typeof packagesParams[packageId]['delivery_confirmation']) {
                                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[delivery_confirmation]']  = packagesParams[packageId]['delivery_confirmation'];
                                    }

                                    for (var packedItemId in this.packages[packageId]['items']) {
                                        if (!isNaN(packedItemId)) {
                                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][qty]']           = this.packages[packageId]['items'][packedItemId]['qty'];
                                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][customs_value]'] = this.packages[packageId]['items'][packedItemId]['customs_value'];
                                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][price]']         = self.defaultItemsPrice[packedItemId];
                                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][name]']          = self.defaultItemsName[packedItemId];
                                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][weight]']        = self.defaultItemsWeight[packedItemId];
                                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][product_id]']    = self.defaultItemsProductId[packedItemId];
                                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][order_item_id]'] = self.defaultItemsOrderItemId[packedItemId];
                                            if ('undefined' != typeof this.packages[packageId]['items'][packedItemId]['hs_code_value']) {
                                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][hs_code_value]']  = this.packages[packageId]['items'][packedItemId]['hs_code_value'];
                                            }
                                        }
                                    }
                                }
                            }

                            new Ajax.Request(this.createLabelUrl, {
                                parameters: this.paramsCreateLabelRequest,
                                onSuccess: function (transport) {
                                    var response = transport.responseText;

                                    if (response.isJSON()) {
                                        response = response.evalJSON();

                                        if (response.error) {
                                            this.messages.show().innerHTML = response.message;
                                        } else if (response.ok && Object.isFunction(this.labelCreatedCallback)) {
                                            this.labelCreatedCallback(response);
                                        }
                                    }
                                }.bind(this)
                            });

                            if (this.paramsCreateLabelRequest['code'] &&
                                this.paramsCreateLabelRequest['carrier_title'] &&
                                this.paramsCreateLabelRequest['method_title'] &&
                                this.paramsCreateLabelRequest['price']
                            ) {
                                var a = this.paramsCreateLabelRequest['code'];
                                var b = this.paramsCreateLabelRequest['carrier_title'];
                                var c = this.paramsCreateLabelRequest['method_title'];
                                var d = this.paramsCreateLabelRequest['price'];

                                this.paramsCreateLabelRequest = {};
                                this.paramsCreateLabelRequest['code']           = a;
                                this.paramsCreateLabelRequest['carrier_title']  = b;
                                this.paramsCreateLabelRequest['method_title']   = c;
                                this.paramsCreateLabelRequest['price']          = d;
                            } else {
                                this.paramsCreateLabelRequest = {};
                            }
                        }
                    }
                });
            }
        });
    </script>
<?php endif; ?>
